# SOLID

1. Single Responsibility Principle
2. Open/Closed Principle
3. Liskov Substitution Principle
4. Interface Segregation Principle
5. Dependency Inversion Principle

-----------------------------

1. Cada classe/função tem uma responsabilidade única;
2. As classes/função da aplicação devem ser abertas para extensão mas fechadas para modificação;
3. Nós devemos poder substituir uma classe pai por uma herança dela e tudo continuar functionando;
4. Uma classe ela deve herdar apenas uma funcionalidade por vez e não herdar uma classe com todas as funcionalidades
5. Inverter a busca de dependencia dentro da aplicação. Ao inves da função buscar serviço externo e pegar dependencias o 
contexto externo deve enviar as dependencias que será utilizada